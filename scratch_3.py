import random
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Voronoi, voronoi_plot_2d
from functions.func import (calc_area, generate_points, fitness)

# INITIATE PLOT
# Adjust the figure size as needed
fig = plt.figure(figsize=(8, 8), facecolor="gray")
ax = fig.add_subplot(111, aspect='equal')
ax.set_facecolor("white")


# INITIAL PARAMETERS
RADIUS = 10
input_areas = [2,1,3,4,5,6,7,8,9,10]
#points = [(0.15, 0.2), (0.1, 1.23), (0.05, 2.33), (1.23, 0.14), (1.25, 1.16),(1.28, 2.8), (2.21, 0.42), (2.41, 1.54), (2.21, 2.26)]  # 9 seed points
#points = [[-1, 0], [0, 0], [-1, -1], [1, 1], [0, 1], [0, -1], [1, -1], [-1, 1], [1, 0]]  # grid point pattern

#points = [(0.9140222415785377, -2.278077309428255), (0.4095026738049796, 6.2666640979905495), (-2.1350035670974554, 9.597577370077747), (-1.4580563528339354, 3.4168290377158677), (-7.061562030124833, 1.774371232509239), (-1.1499240443849974, 6.425810957156635), (5.467506779670735, -2.3759464758858435), (-8.461836441702618, 1.8530766624259716), (3.47736409405454, 6.008007878023189)]
#points = [(1.637673132787734, 3.4081119817128567), (1.4446965527704254, 0.7979874758661882), (6.428378401923496, 4.2262953105361145), (1.5966708340949776, 0.5912057965229938), (1.821550200149007, -8.025261992111792), (2.0488680720974806, 9.271960084864343), (2.2621869501189558, 6.536988546120185), (-2.504576164481529, -3.12683617525866), (0.15758059899696875, -4.162303016294533)]
#points = [(6.68952222305062, 1.6074241453323417), (0.9736775449885542, -3.9758260957263314), (5.682607656607397, -2.8305635004186662), (2.0449606109262817, -6.09069323689627), (4.604179596185482, -7.272246042647432), (5.200863442274937, -2.807508974426394), (4.537613395665774, 1.7643094147927734), (-2.0493372059557835, -0.815014793203801), (-3.1362509777615326, -9.241912307166103), (-2.2011314546658216, 9.52029105133176), (1.1478090431540302, 5.6182670275267395), (7.693873028867944, -5.153121031907957), (-9.791215731487187, -1.59392468749453), (1.1338699971456663, 7.6814776261454085), (-7.163333163643426, -1.3827459895144898), (4.143813479545866, -7.30697672412054), (-1.4046389038756253, -7.668722974156415), (-2.3208253923263396, 3.3185249198093647), (6.039938899625845, 2.1518087128337076)]

#points = [(-0.3018925128886991, -1.3972102349275168), (3.8099209085944814, -2.8301563856018586), (-0.10750876434505052, 8.958138402811034), (4.454071742689154, 4.852462734983082), (-4.169993207217462, -1.2403102156954482), (6.77560637280726, 4.896573583795195), (1.2067849550604208, -0.20712616339577394), (4.707882278289922, -8.144652203149816), (6.7994574589954375, 6.879389514643002), (-4.502660804682625, -8.097798795820644), (8.079426398186335, -2.1524010058450944), (3.2426497626185196, -3.8351534424556704), (0.3860784830959787, 4.899125381669236), (4.865577676776436, -4.5346967984800095), (2.3321458030701017, -7.902821751544067), (1.3552494672418298, 4.461945121852043), (0.003331827373125762, 8.517641464152057), (0.14794461932037883, -1.6306407017519415), (0.7592338048955938, -9.032764335977369), (7.632726329010207, 3.376933783409532)]
#points = [(7.36101256411742, 5.742455279484579), (-9.358124160196157, -0.36739681882408703), (0.20682918172898646, -9.429752962575071), (5.546453650349667, 4.529939409245687), (3.1995636696799146, -1.4928572164629443), (-1.3048201174497525, -7.311682049220596), (-3.972923237655019, -4.923718428824795), (-7.523930804510504, 5.797355347385221), (-8.398769675609334, -1.7518204724659228), (3.1171138174848316, -0.6331080535619513), (2.2409856881855923, -8.745834651541148), (-0.6869344040394143, 5.152672664747088), (5.673084204472884, -7.119520235117429), (0.24407858216336997, -1.3035225956615548), (-4.64375301661379, -4.000274429452806), (-4.39273772787476, 2.831696834876354), (-8.438911877339939, 0.40864972117078224), (-2.012786314624262, 6.80048022383091), (-6.114203336344451, -5.784062852103437), (1.4568378257323804, 2.2914882639362855)]

#points = [(-0.2943472361497772, -4.428492960717898), (-3.6853740474328633, 6.878276235840744), (4.182356298469401, -8.421807283472273)]
#points = [(4.282573051261291, 8.155071697979093), (1.1359493790311, 8.311854903778496), (0.9165748286749658, 3.268683694074518)]
#points = [(2.8221074948368106, 2.4138256725050056), (5.725143947827069, 4.709448782655041), (-2.1028198193876557, -1.8666490822154778)]
#points = (0.21338870932103404, 5.0296018383813), (2.2014504121108764, -8.0530411482479), (6.667587174753983, -6.913544918261092)]
#points = [(1.4769187423840044, 3.285891831407886), (-0.1353302628953763, 1.188705111179564), (0.28966683130646764, 7.781561671987728)]
#points = [(0.8739416403786571, 9.480896505428312), (1.1651101328720888, 6.428811617512292), (-3.5923987486649427, 2.2563584462829933)]
#points = [(1.6676544662658817, -1.1072529244461489), (2.237273540147145, 9.108845647581237), (4.810459739786133, 6.5847866772868215)]
#points = [(-1.845886995780404, 2.940567701161269), (-2.705270968132396, 5.304489277414003), (-7.257096524503148, 4.059299494809892), (5.288737557984021, -8.365592953551833), (-1.456068736961189, 5.842978722355072), (-2.549677183413226, 9.057627811532228), (-0.5632425799063139, 8.74338932382971), (3.5913552786734986, -3.126921005703198), (-5.159540965215448, 8.326081269590002), (4.552510317210741, -7.3831617130030835)]

#points = [(1.7835520697832248, 8.835168765526657), (4.099091082788997, 4.750264866981448), (2.028172752470482, 4.01128430093036), (2.7955753364674933, 6.050023357466717), (5.0783237432529695, -7.019809891186726), (1.6210618532746164, 8.895540823490787), (6.880497540067449, 4.123162071095678), (-9.258323653244698, 1.4711325386903624), (4.84967430282529, 6.475716584731476), (-9.744429877634971, 1.4762142089433876)]

#points = [(2.7219874108718862, -4.021282066067002), (-3.2222342780028645, -2.1747465284112106), (-3.4800373330103547, 9.06889715332715), (6.1812696280562704, -3.601557151882899), (-3.5593703962367584, 9.281501913279623), (-2.517822000619942, -3.138980617963232), (-1.4880695628540668, -7.285490691073737), (0.5323253436297559, -0.3101120125774397)]
#points = [(6.147751915946035, -5.806922402098196), (0.8853339958561399, -4.233498335883363), (2.251076644172347, -5.510615813449133), (5.160370510149033, -6.682977388278171), (2.529697106883795, -9.587390367389467), (5.005120671048463, -8.436054319090868), (1.445196876195201, -5.2064899836566365), (-0.4604022237159544, -1.734817506956464)]
#points = [(0.9945713442154354, -8.283378686546074), (5.939067321824416, 7.95331794411242), (5.793663203466668, 7.719237435954508), (-0.7273739013100471, -0.10419558310406529), (-7.127309281679448, -2.495319191085901), (-3.100056226511403, -0.8729912791562491), (-4.592513314402207, 1.4031216853287738), (0.5582327926542323, 0.38682109464502545)]

points = [(-4.86296557563098, -2.6808243072104343), (7.206448221544115, 6.8939215787537655), (-3.8986144055628014, 6.100215535506138), (-7.131463571707801, -1.0899402571245087), (-1.0933033434048625, -9.54208468128607), (-8.284796248248687, -2.724090677901807), (5.911951598769136, -4.759342682265732), (6.989923650654582, 6.709851740919529), (1.0423380068367578, -2.0515286608595122), (-2.989835648642263, -0.9311847170957464), (1.8453430737670438, -6.069408333290454), (-1.6220706528408577, -8.042803744845212)]
#points = [(-3.495942186206536, 3.247587316231204), (-0.7666511139001386, 1.9445724256535222), (-8.706951399103497, -4.892489498796049), (-3.3447006340057044, 6.387831430517142), (-1.548867480348461, -3.004336191487038), (0.5085579909360547, 7.53823366900545), (-8.58609734996775, -4.808178112004724), (7.402039901513831, 5.304338939990036), (3.687860850909157, 2.6218755240373337), (7.4861112169622075, 0.502643666015901), (-2.7236280807021345, 5.818407158646732), (4.47895744696546, 4.60082939454886)]
#points = [(-2.748620715036081, 4.8743204957908866), (-2.2835950106292735, -4.29962987829165), (-1.1922295677688979, -0.6248050209847413), (-4.64758801698093, -0.05154599193895493), (1.4284532610784435, 2.6744125953082865), (-2.403568632684676, 4.482428866080934), (-7.338341192387389, -4.9247590905664556), (-7.266438854461454, -2.1653668768447325), (-5.831749348943516, 3.2189456274733104), (7.748828568278789, 5.886450572543167), (-5.001871892895515, -5.620935642489117), (7.725286683469342, 5.873160585438589)]


#points = generate_points(12, RADIUS, "circle")

#print(fitness(points,input_areas,RADIUS))


#print(points)

# Add corner points
points.extend([(-2*RADIUS, -2*RADIUS), (-2*RADIUS, 2*RADIUS),
            (2*RADIUS, -2*RADIUS), (2*RADIUS, 2*RADIUS)])

# Create Voronoi Diagram
vor = Voronoi(points)

# reorder vor.regions by vor.point_region indices
vor.regions = [vor.regions[i] for i in vor.point_region]


# plot area in correct location and calculate total area

total_area = 0
for i, region in enumerate(vor.regions):
    cell_area = 0
    cell_area = calc_area(vor,i,RADIUS)
    
    plt.text(vor.points[i][0], vor.points[i][1] + 0.2,
            f'{cell_area:.3g}', ha='center', va='center')
    total_area += cell_area

#if total_area > 314.16 or total_area < 314.158:
#    print("Total area:", total_area)
#    #if abs(314 - total_area) > 0:
#    print(points)




# Plot vertex ID's in simple order of vor.vertices
for i, vertex in enumerate(vor.vertices):
    # why does it output "array([x,y])" when printed?
    plt.text(vertex[0], vertex[1] + 0.2, i, ha='center', va='center')

# plot seed ID according to point_region ID
# for i, seed in enumerate(seeds):  # follows order of seeds array, then plots correct index number on seed location
#    plt.text(seed[0], seed[1] + 0.05, vor.point_region[i], ha='center', va='center')

# inverted from above, should give same result
# for i, ind in enumerate(vor.point_region):  # follows order of regions, then plots index
#    plt.text(vor.points[i][0], vor.points[i][1] + 0.05, f'{areas[ind]:.3g}', ha='center', va='center')

# just for double-checking, array not really needed, I think
# points_with_id = []
# for i, seed in enumerate(seeds):
#    points_with_id.append([vor.point_region[i], seed])

# print regions containing -1 (should always be exactly 4 because of corner points)
# for region in vor.regions:
    # if -1 in region:
    # print("regions containing -1: \n", region)

# print("points_with_id: \n", points_with_id)
# print("vor.point_region: \n", vor.point_region)
# print("vor.regions (reordered): \n", vor.regions)
# print("vor.vertices: \n", vor.vertices)
# print("vor.points (=seeds): \n", vor.points, "\n")

# print("vor.ridge_points: \n", vor.ridge_points)
# print("vor.ridge_vertices: \n", vor.ridge_vertices, "\n")

# print connected vertices to each vertex
# for i in range(len(vor.vertices)):
#    ridges = find_connected_vertices(vor, i)
#    print("ridges containing index: \n", ridges, "\n")

# print how many ridges intersect circle
# is_intersecting = []
# for i in range(len(vor.ridge_vertices)):
#    is_intersecting.append(is_ridge_intersecting_circle(RADIUS, vor, i))
# print(is_intersecting.count(True))

# print ridges of each region
# for i in range(len(vor.regions)):
#    ridges_in_region = (ridges_of_region(vor, i))
#    print("Ridges in region:", ridges_in_region)




# PLOT
voronoi_plot_2d(vor, ax=ax, line_colors="blue",
                line_width=1, point_colors="gray")
plt.xlim(-(RADIUS + 2), (RADIUS + 2))
plt.ylim(-(RADIUS + 2), (RADIUS + 2))
plt.xlabel('X')
plt.ylabel('Y')
plt.title("Voronoi Diagram, Total Area of cells: " + str(total_area))
plt.grid(True)
plt.gca().set_aspect('equal')

ax.add_patch(plt.Circle((0, 0), radius=RADIUS, fill=False, color='gray'))

plt.show()

# NOTES
# vor.regions is in the order of vor.point_region's indexes
# vor.vertices is already ordered by their index, ascending
# vor.ridge_points is in the order of vor.points
# vor.ridge_vertices is in the order of vor.vertices
